#!/usr/bin/env node

/**
 * Module dependencies.
 */


const db = require('../db/updateDb.js');
const common = require('../common.js');
const telegramNotifier = require('../telegram-notifications-bot-controler/control.js');

var schedule = require('node-schedule');

if (common.serverConfig.scheduleUpdate.enabled) {

  console.log();
  console.log("enabling scheduled update at " + JSON.stringify(common.serverConfig.scheduleUpdate.scheduleTime));
  var j = schedule.scheduleJob(common.serverConfig.scheduleUpdate.scheduleTime, async function (fireDate) {


    console.log('db update scheduled to run at ' + fireDate + ' started at ' + new Date());
    
    let rowsInserted = await db.fillCasesByCountry('FR');
    console.log(rowsInserted + " rows inserted");

  });
}
else {

  console.log("scheduled update disabled");

}

var app = require('../app');
var debug = require('debug')('visualisation-cas-covid-19:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || common.serverConfig.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, common.serverConfig.listeningInterface);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  let listeningOnMsg = 'Listening on ' + bind
  debug(listeningOnMsg);
  console.log(listeningOnMsg);
}
