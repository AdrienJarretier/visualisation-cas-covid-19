#!/usr/bin/env node

/**
 * Module dependencies.
 */


const updateDb = require('../db/updateDb.js');
const common = require('../common.js');
const telegramNotifier = require('../telegram-notifications-bot-controler/control.js');
const Database = require('better-sqlite3');

var schedule = require('node-schedule');




const DB_FILENAME = common.serverConfig['telegram-notifications-bot-controler'].db.database;

const WELCOME_MSG = `Bonjour,
je vous confirme avoir enregistré votre souscription.
Je vous notifierai chaque jour lorsque de nouvelles données sont disponibles sur
http://evolution-coronavirus.tk/
`

const ALREADY_REGISTERED = `Vous êtes déjà enregistré pour reçevoir les notifications de
http://evolution-coronavirus.tk/`




telegramNotifier.onStart(function (message) {


  const db = new Database(DB_FILENAME);

  let stmt = db.prepare("SELECT count(*) FROM clients WHERE chat_id = ? ");
  let alreadyInDb = stmt.get(message.chat.id)['count(*)'] == 1;


  console.log('    ----    ');
  console.log('start from');
  console.log(message.chat.id);

  if (alreadyInDb) {

    console.log('chat id already in db');
    telegramNotifier.sendMessage(ALREADY_REGISTERED, message.chat.id);

  } else {

    console.log('sending welcome message')

    telegramNotifier.sendMessage(WELCOME_MSG, message.chat.id);

    stmt = db.prepare("INSERT INTO clients(chat_id) VALUES (?)");

    try {

      const info = stmt.run(message.chat.id);

      console.log("succesfully inserted new chat id in db");

    } catch (err) {

      console.log("error when inserting new chat id in db");
      console.log(err);

    }

  }

  console.log('    ----    ');

  db.close();

})




if (common.serverConfig.scheduleUpdate.enabled) {

  console.log();
  console.log("enabling scheduled update at " + JSON.stringify(common.serverConfig.scheduleUpdate.scheduleTime));
  var j = schedule.scheduleJob(common.serverConfig.scheduleUpdate.scheduleTime, async function (fireDate) {


    console.log('db update scheduled to run at ' + fireDate + ' started at ' + new Date());

    let rowsInserted = await updateDb.fillCasesByCountry('FR');
    console.log(rowsInserted + " rows inserted");

  });
}
else {

  console.log("scheduled update disabled");

}

var app = require('../app');
var debug = require('debug')('visualisation-cas-covid-19:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || common.serverConfig.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, common.serverConfig.listeningInterface);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  let listeningOnMsg = 'Listening on ' + bind
  debug(listeningOnMsg);
  console.log(listeningOnMsg);
}
