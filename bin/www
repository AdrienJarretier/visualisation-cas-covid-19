#!/usr/bin/env node

/**
 * Module dependencies.
 */


const updateDb = require('../db/updateDb.js');
const common = require('../common.js');
const telegramNotifier = require('../telegram-notifications-bot-controler/control.js');
const Database = require('better-sqlite3');

var schedule = require('node-schedule');




const CASES_DB = common.serverConfig.db.database;
const TELEGRAM_CLIENTS_ENABLED = common.serverConfig['telegram-notifications-bot-controler'].enabled;
const TELEGRAM_CLIENTS_DB = common.serverConfig['telegram-notifications-bot-controler'].db.database;

const WELCOME_MSG = `Bonjour,
je vous confirme avoir enregistré votre souscription.
Je vous notifierai chaque jour lorsque de nouvelles données sont disponibles sur
http://evolution-coronavirus.tk/
`

const ALREADY_REGISTERED = `Vous êtes déjà enregistré pour reçevoir les notifications de
http://evolution-coronavirus.tk/`




telegramNotifier.onStart(function (message) {


  const db = new Database(TELEGRAM_CLIENTS_DB);

  let stmt = db.prepare("SELECT count(*) FROM clients WHERE chat_id = ? ");
  let alreadyInDb = stmt.get(message.chat.id)['count(*)'] == 1;


  console.log('    ----    ');
  console.log('start from');
  console.log(message.chat.id);

  if (alreadyInDb) {

    console.log('chat id already in db');
    telegramNotifier.sendMessage(ALREADY_REGISTERED, message.chat.id);

  } else {

    console.log('sending welcome message')

    telegramNotifier.sendMessage(WELCOME_MSG, message.chat.id);

    stmt = db.prepare("INSERT INTO clients(chat_id) VALUES (?)");

    try {

      const info = stmt.run(message.chat.id);

      console.log("succesfully inserted new chat id in db");

    } catch (err) {

      console.log("error when inserting new chat id in db");
      console.log(err);

    }

  }

  console.log('    ----    ');

  db.close();

})


async function downloadDataAndNotifyTelegramCliens(fireDate) {

  console.log('db update scheduled to run at ' + fireDate + ' started at ' + new Date());

  async function update_cases(geoid) {

    let casesUpdateResult = await updateDb.fillCasesByCountry(geoid);

    console.log(casesUpdateResult.rowsInserted + " rows inserted for country " + geoid);

    let new_data = casesUpdateResult.rowsInserted > 0

    if (new_data) {


      let casesDb = new Database(CASES_DB)
      let stmt = casesDb.prepare("SELECT * from cases INNER JOIN countries ON cases.country=countries.geoid ORDER BY date DESC");

      let casesPastDay = stmt.get()

      casesDb.close();

      console.log(casesPastDay);

      return casesPastDay['cases']

    }

    return 0
  }

  // --- data

  let countries = {
    'FRA': 'la France',
    'DEU': "l'Allemagne"
  }
  let news_str_array = []
  let news_map = {};
  let total = 0;

  // --- parsing

  for (let geoid in countries) {

    let new_cases = await update_cases(geoid);

    news_map[geoid] = new_cases;
    total += new_cases

    if (new_cases > 0) {
      let country_name = countries[geoid]
      news_str_array.push(' - ' + new_cases + ' nouveaux contaminés pour ' + country_name)
    }

  }

  // --- send message

  if (total > 0 && TELEGRAM_CLIENTS_ENABLED) {

    const db = new Database(TELEGRAM_CLIENTS_DB);

    stmt = db.prepare("SELECT * from clients");

    let rows = stmt.all();

    console.log("notifying registered clients of new data");

    let message_str = 'http://evolution-coronavirus.tk/ \n' + news_str_array.join('\n');

    console.log(message_str)

    for (let row of rows) {

      telegramNotifier.sendMessage(message_str, row['chat_id']);

    }

    db.close();
  }

}





if (common.serverConfig.scheduleUpdate.enabled) {

  console.log();
  console.log("enabling scheduled update at " + JSON.stringify(common.serverConfig.scheduleUpdate.scheduleTime));

  downloadDataAndNotifyTelegramCliens("only once");

  var j = schedule.scheduleJob(common.serverConfig.scheduleUpdate.scheduleTime, downloadDataAndNotifyTelegramCliens);
}
else {

  console.log("scheduled update disabled");

  downloadDataAndNotifyTelegramCliens("only once");

}

var app = require('../app');
var debug = require('debug')('visualisation-cas-covid-19:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || common.serverConfig.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, common.serverConfig.listeningInterface);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  let listeningOnMsg = 'Listening on ' + bind
  debug(listeningOnMsg);
  console.log(listeningOnMsg);
}
